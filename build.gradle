plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.team6'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt
    querydsl
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
	maven {url 'https://repo.spring.io/milestone'}
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // == Web & Validation ==
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // == Security ==
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // == JPA & DB ==
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // == QueryDSL Implementation ==
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // == Monitoring ==
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // == AI Integration ==
    implementation 'org.springframework.ai:spring-ai-starter-model-openai:1.0.0-M7'

    // == REST Docs ==
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // == Testing ==
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // == Lombok ==
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

// == Logging ==
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.withType(Test) {
	// 모든 테스트 실행 시 test 프로파일 활성화
	systemProperty 'spring.profiles.active', 'test'
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

asciidoctor {
    baseDirFollowsSourceFile()

    doLast {
        copy {
            from 'src/main/resources/static/docs/stomp.html'
            into "${asciidoctor.outputDir}"
        }
    }
}

tasks.register('copyApiDocument', Copy) {
    dependsOn asciidoctor
    doFirst {
        delete file("src/main/resources/static/docs")
    }

    from asciidoctor.outputDir
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn copyApiDocument
    from("src/main/resources/static/docs") {
        into("static/docs")
    }
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main {
        java {
            srcDirs += [querydslDir]
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

tasks.named('clean') {
    doLast {
        file(querydslDir).deleteDir()
    }
}
